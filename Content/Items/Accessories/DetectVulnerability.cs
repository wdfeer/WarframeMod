using Microsoft.Xna.Framework.Graphics;

namespace WarframeMod.Content.Items.Accessories;

public class DetectVulnerability : ModItem
{
    public const float VULNERABILITY_DAMAGE_MULT = 1.2f;
    public override void SetStaticDefaults()
    {
        Tooltip.SetDefault($"Dealing summon damage reveals weak points on enemies for 2.5 seconds]\nProjectiles deal {VULNERABILITY_DAMAGE_MULT:0.0}x damage on weak points");
    }
    public override void SetDefaults()
    {
        Item.accessory = true;
        Item.rare = ItemRarityID.Orange;
        Item.value = Item.sellPrice(gold: 5);
    }
    public override void UpdateAccessory(Player player, bool hideVisual)
    {
        player.GetModPlayer<DetectVulnerabilityPlayer>().enabled = true;
    }
}
class DetectVulnerabilityPlayer : ModPlayer
{
    public bool enabled;
    public override void ResetEffects()
        => enabled = false;
    public override void ModifyHitNPCWithProj(Projectile proj, NPC target, ref int damage, ref float knockback, ref bool crit, ref int hitDirection)
    {
        if (!enabled || (proj.DamageType != DamageClass.Summon && proj.DamageType != DamageClass.SummonMeleeSpeed))
            return;
        target.GetGlobalNPC<DetectVulnerabilityGlobalNPC>().CreateVulnerability(target, 150);
    }
}
class DetectVulnerabilityGlobalNPC : GlobalNPC
{
    public override bool InstancePerEntity => true;
    public short timeLeft = 0;
    public Point vulnerability;
    public void CreateVulnerability(NPC npc, short duration)
    {
        Point NextPointRectangeEdge(Rectangle rect)
        {
            int x = rect.X;
            int y = rect.Y;
            if (Main.rand.NextBool())
            {
                x += Main.rand.NextBool() ? rect.Width : 0;
                y += Main.rand.Next(rect.Height + 1);
            }
            else
            {
                y += Main.rand.NextBool() ? rect.Height : 0;
                x += Main.rand.Next(rect.Width + 1);
            }
            return new Point(x, y);
        }
        if (!Vulnerable)
            vulnerability = NextPointRectangeEdge(npc.getRect()) - npc.position.ToPoint();
        timeLeft = duration;
    }
    public bool Vulnerable => timeLeft > 0;
    const int SPRITE_SIZE = 32;
    public override void PostDraw(NPC npc, SpriteBatch spriteBatch, Vector2 screenPos, Color drawColor)
    {
        if (!Vulnerable)
            return;
        Point drawPos = (npc.position + vulnerability.ToVector2() - new Vector2(SPRITE_SIZE / 2, SPRITE_SIZE / 2) - screenPos).ToPoint();
        Rectangle drawRect = new Rectangle(drawPos.X, drawPos.Y, SPRITE_SIZE, SPRITE_SIZE);
        Texture2D texture = ModContent.Request<Texture2D>("WarframeMod/Assets/Circle256").Value;
        spriteBatch.Draw(texture, drawRect, new Color(1f, 1f, 0f, 0f));
    }
    public override void PostAI(NPC npc)
    {
        if (Vulnerable)
            timeLeft--;
    }
    Rectangle GetVulnerableRect(NPC npc)
    {
        int radius = SPRITE_SIZE / 2;
        Point pos = npc.position.ToPoint() + vulnerability - new Point(radius, radius);
        return new Rectangle(pos.X, pos.Y, SPRITE_SIZE, SPRITE_SIZE);
    }
    public override void ModifyHitByProjectile(NPC npc, Projectile projectile, ref int damage, ref float knockback, ref bool crit, ref int hitDirection)
    {
        if (Vulnerable && projectile.getRect().Intersects(GetVulnerableRect(npc)))
            damage = (int)(damage * DetectVulnerability.VULNERABILITY_DAMAGE_MULT);
    }
}